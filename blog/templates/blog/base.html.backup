{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="csrf-token" content="{{ csrf_token }}"> {# Add CSRF token meta tag #}
    <title>{% block title %}Photo Blog{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600&family=Source+Sans+Pro:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/vr-viewer.css' %}">
    <link rel="stylesheet" href="{% static 'css/mobile.css' %}">
    <link rel="stylesheet" href="{% static 'css/desktop.css' %}">
    <!-- Stili per la griglia di foto nella barra laterale -->
    <style>
        .sidebar-photo-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr 1fr;
            gap: 5px;
            margin: 15px 0;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .sidebar-photo-item {
            position: relative;
            aspect-ratio: 1/1;
            overflow: hidden;
            border-radius: 4px;
        }
        
        .sidebar-photo-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }
        
        .sidebar-photo-item:hover img {
            transform: scale(1.05);
        }
        
        .sidebar-photo-grid-title {
            font-size: 0.9rem;
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--text-color);
        }
        
        .sidebar-photo-item .photo-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.5);
            color: white;
            font-size: 0.7rem;
            padding: 3px 5px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .sidebar-photo-item:hover .photo-overlay {
            opacity: 1;
        }
        
        /* Stili per l'animazione di fade */
        .fade-out {
            opacity: 0;
            transition: opacity 1.5s ease;
        }
        
        .fade-in {
            opacity: 1;
            transition: opacity 1.5s ease;
        }
    </style>
    <style>
        :root {
            --bg-color: #ffffff;
            --text-color: #333333;
            --heading-color: #222222;
            --border-color: #e0e0e0;
            --accent-color: #007bff;
            --sidebar-bg: #f8f9fa;
            --card-bg: #ffffff;
            --button-bg: #f5f5f5;
            --button-text: #333333;
            --button-hover-bg: #e9ecef;
            --button-hover-text: #212529;
            --photo-grid-bg: #ffffff;
            --sidebar-section-bg: #f0f0f0;
            --sidebar-section-text: #333333;
            --sidebar-section-title-bg: #f0f0f0;
            --sidebar-section-title-text: #333333;
            --dropdown-bg: #ffffff;
            --dropdown-text: #333333;
            --dropdown-hover-bg: #f0f0f0;
        }

        [data-theme="dark"] {
            --bg-color: #121212;
            --text-color: #e0e0e0;
            --heading-color: #ffffff;
            --border-color: #333333;
            --accent-color: #4dabf7;
            --sidebar-bg: #1e1e1e;
            --card-bg: #1e1e1e;
            --button-bg: #333333;
            --button-text: #e0e0e0;
            --button-hover-bg: #454545;
            --button-hover-text: #ffffff;
            --photo-grid-bg: #1e1e1e;
            --sidebar-section-bg: #333333;
            --sidebar-section-text: #ffffff;
            --sidebar-section-title-bg: #333333;
            --sidebar-section-title-text: #ffffff;
            --dropdown-bg: #333333;
            --dropdown-text: #ffffff;
            --dropdown-hover-bg: #444444;
        }

        body {
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: all 0.3s ease;
            font-family: 'Source Sans Pro', sans-serif;
        }
        
        /* Logo styles for light/dark mode */
        .logo-light {
            display: block;
        }
        
        .logo-dark {
            display: none;
        }
        
        [data-theme="dark"] .logo-light {
            display: none;
        }
        
        [data-theme="dark"] .logo-dark {
            display: block;
        }

        h1, h2, h3, h4, h5, h6 {
            font-family: 'Playfair Display', serif;
            color: var(--heading-color);
        }

        #sidebar {
            background-color: var(--sidebar-bg);
            min-height: 100vh;
            transition: all 0.3s;
            width: 250px;
            position: fixed;
            left: 0;
            z-index: 1000;
            overflow-y: auto;
            height: 100%;
        }

        #sidebar.collapsed {
            margin-left: -250px;
        }

        .dropdown-content {
            padding-left: 10px;
        }
        
        .dropdown-preview {
            padding: 5px 0;
            margin-top: 5px;
            opacity: 0.6;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 100%;
            display: none;
        }
        
        .dropdown-preview.show {
            display: block;
        }

        #content {
            margin-left: 250px;
            transition: all 0.3s;
            width: calc(100% - 250px);
            min-height: 100vh;
            padding: 15px;
            overflow-x: hidden; /* Prevent horizontal scrolling */
        }

        #content.expanded {
            margin-left: 0;
            width: 100%;
        }
        
        /* Dark mode button is always in the top-right corner */
        
        /* Mobile responsiveness */
        @media (max-width: 992px) {
            /* Automatically hide sidebar on smaller screens */
            #sidebar {
                margin-left: -250px !important; /* Position sidebar off-screen */
                transition: margin-left 0.3s; /* Smooth transition */
            }
            
            #sidebar.active {
                margin-left: 0 !important; /* Show sidebar when active */
            }
            
            /* Full-width content */
            #content {
                margin-left: 0 !important;
                width: 100% !important;
                transition: all 0.3s;
            }
            
            /* Ensure toggle button is visible */
            .toggle-button {
                display: block !important;
            }
            
            /* Adjust container padding */
            .container {
                padding-left: 10px;
                padding-right: 10px;
            }
            
            /* Force vertical scrolling */
            body {
                overflow-x: hidden;
            }
            
            /* Improve spacing for mobile */
            .row {
                margin-left: -5px;
                margin-right: -5px;
            }
            
            .col, [class*="col-"] {
                padding-left: 5px;
                padding-right: 5px;
            }
        }

        /* Toggle buttons */
        .toggle-button {
            position: fixed;
            top: 10px;
            z-index: 1001;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            background-color: var(--bg-color);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            color: var(--text-color);
        }
        
        /* Left-aligned sidebar toggle */
        .sidebar-toggle {
            left: 10px;
        }
        
        /* Right-aligned dark mode toggle in the top-right corner */
        .dark-mode-btn {
            right: 10px;
            position: fixed;
            top: 10px;
            z-index: 1100;
        }
        
        /* Horizontal color selector for photo grid backgrounds */
        .horizontal-color-selector {
            position: fixed;
            right: 60px;
            top: 10px; /* Allineato con l'icona dark mode */
            z-index: 1100;
            display: flex;
            align-items: center;
        }
        
        .color-options {
            display: flex;
            gap: 5px;
        }
        
        .color-option {
            width: 40px !important;
            height: 40px !important;
            min-width: 40px !important;
            min-height: 40px !important;
            max-width: 40px !important;
            max-height: 40px !important;
            border-radius: 4px !important;
            border: 1px solid var(--border-color) !important;
            cursor: pointer;
            transition: all 0.3s ease !important;
            padding: 0 !important;
            background: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .color-option:hover {
            transform: scale(1.1) !important;
            opacity: 0.9;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .color-option.active {
            border: 1px solid var(--accent-color) !important;
            transform: none !important;
        }
        
        :root {
            --photo-grid-bg: #ffffff;
        }

        #sidebar.collapsed + #content {
            margin-left: 0;
            width: 100%;
        }

        #sidebar.collapsed ~ .toggle-button {
            display: block;
        }

        .photo-grid {
            display: flex;
            flex-direction: column;
            gap: 20px;
            align-items: center;
        }

        .photo-item {
            max-width: 90%;
            height: auto;
            background: var(--sidebar-bg);
            padding: 15px;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .photo-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .photo-item img {
            width: 100%;
            height: auto;
            object-fit: contain;
            border-radius: 4px;
        }

        .dropzone {
            border: 2px dashed var(--text-color);
            border-radius: 8px;
            padding: 30px;
            text-align: center;
            background: var(--bg-color);
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            max-width: 100%;
        }

        .dropzone:hover {
            border-color: var(--accent-color);
            background: var(--sidebar-bg);
        }
        
        /* Responsive dropzone for mobile */
        @media (max-width: 576px) {
            .dropzone {
                padding: 15px;
            }
            
            .dropzone i {
                font-size: 2em !important;
            }
            
            .dropzone p {
                font-size: 14px;
                margin-bottom: 10px;
            }
            
            /* Improve photo grid on mobile */
            .photo-grid {
                grid-template-columns: repeat(2, 1fr) !important;
                gap: 8px !important;
            }
            
            /* Adjust card padding */
            .card-body {
                padding: 12px;
            }
            
            /* Make buttons more tappable */
            .btn {
                padding: 8px 12px;
                margin-bottom: 5px;
            }
            
            /* Adjust form controls */
            .form-control {
                font-size: 16px; /* Prevents iOS zoom on input focus */
            }
            
            /* Improve modal display on mobile */
            .modal-dialog {
                margin: 10px;
                max-width: calc(100% - 20px);
            }
            
            /* Better spacing for mobile */
            h1, h2, h3, h4, h5 {
                margin-top: 0.5rem;
                margin-bottom: 0.5rem;
            }
            
            /* Adjust padding for containers */
            .container, .container-fluid {
                padding-left: 10px;
                padding-right: 10px;
            }
        }

        .toggle-button:hover {
            background-color: var(--accent-color);
            color: white;
        }

        /* Uniform button styling */
        .btn {
            font-family: 'Source Sans Pro', sans-serif;
            font-size: 16px;
            font-weight: 500;
            padding: 10px 16px;
            border-radius: 8px;
            border: none;
            transition: all 0.3s ease;
            background-color: var(--button-bg);
            color: var(--button-text);
            text-align: center;
            margin: 5px 0;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            opacity: 0.9;
        }
        
        .btn:hover {
            background-color: var(--button-hover-bg);
            color: var(--button-hover-text);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            opacity: 1;
        }
        
        .btn:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        /* Override bootstrap btn styles */
        .btn-primary, .btn-secondary, .btn-success, .btn-danger, .btn-warning, .btn-info, .btn-dark {
            background-color: var(--button-bg);
            color: var(--button-text);
            border: none;
        }

        .btn-primary:hover, .btn-secondary:hover, .btn-success:hover, 
        .btn-danger:hover, .btn-warning:hover, .btn-info:hover, .btn-dark:hover {
            background-color: var(--button-hover-bg);
            color: var(--button-hover-text);
        }
        
        .btn-outline-primary, .btn-outline-secondary, .btn-outline-success, .btn-outline-danger, .btn-outline-warning, .btn-outline-info, .btn-outline-dark {
            color: var(--text-color);
            border: 1px solid var(--border-color);
            background-color: transparent;
        }
        
        .btn-outline-primary:hover, .btn-outline-secondary:hover, .btn-outline-success:hover, .btn-outline-danger:hover, .btn-outline-warning:hover, .btn-outline-info:hover, .btn-outline-dark:hover {
            background-color: var(--button-hover-bg);
            color: var(--button-hover-text);
            border: 1px solid var(--button-bg);
        }
        
        .btn-sm {
            padding: 8px 12px;
            font-size: 14px;
        }
        
        .btn-lg {
            padding: 12px 20px;
            font-size: 18px;
        }

        /* Rimuovere selettore blu */
        .btn-check:checked + .btn-primary, 
        .btn-check:active + .btn-primary, 
        .btn-primary:active, 
        .btn-primary.active, 
        .show > .btn-primary.dropdown-toggle {
            background-color: var(--button-bg);
            border-color: var(--border-color);
        }

        .btn:focus, .btn-primary:focus, .btn-secondary:focus, 
        .btn-success:focus, .btn-danger:focus, .btn-warning:focus, 
        .btn-info:focus, .btn-dark:focus {
            box-shadow: none;
            outline: none;
        }

        .photo-caption-form {
            margin-top: 10px;
        }

        .photo-caption-form input {
            background-color: var(--input-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
        }

        .sidebar-icon {
            display: none;
        }
        
        /* Stile per le frecce a tendina */
        .dropdown-arrow {
            transition: transform 0.3s ease;
            cursor: pointer;
            font-size: 14px;
        }
        
        .sidebar-section {
            background-color: var(--sidebar-section-bg);
            color: var(--sidebar-section-text);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .sidebar-section a {
            color: var(--sidebar-section-text);
        }
        
        .sidebar-section-header {
            cursor: pointer;
            padding: 8px;
            border-radius: 4px 4px 0 0;
            color: var(--sidebar-section-title-text);
            background-color: var(--sidebar-section-title-bg);
            margin: -15px -15px 10px -15px;
            font-weight: bold;
        }
        
        .sidebar-section-header:hover {
            background-color: rgba(0,0,0,0.05);
        }
        
        .sidebar-section-header[aria-expanded="true"] .dropdown-arrow {
            transform: rotate(180deg);
        }

        #sidebar.collapsed .sidebar-full {
            display: none;
        }

        #sidebar.collapsed .sidebar-icon {
            display: inline-block;
        }

        #sidebar.collapsed {
            width: 60px;
            min-width: 60px;
        }

        #sidebar.collapsed + #content {
            margin-left: 60px;
            width: calc(100% - 60px);
        }

        /* Form elements */
        input, textarea, select {
            background-color: var(--input-bg);
            color: var(--text-color);
            border-color: var(--border-color);
            border-radius: 8px;
            padding: 10px;
            font-size: 16px;
        }

        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 2px rgba(128,128,128,0.2);
        }

        /* Cards and containers */
        .card, .alert, .form-control {
            background-color: var(--sidebar-bg);
            color: var(--text-color);
            border-color: var(--border-color);
            border-radius: 8px;
        }

        a {
            color: var(--link-color);
            text-decoration: none;
            transition: color 0.3s ease;
        }

        a:hover {
            color: var(--accent-color);
        }

        /* Table styles */
        table {
            color: var(--text-color);
        }

        .table tbody tr {
            background-color: var(--bg-color);
            color: var(--text-color);
        }

        /* Slideshow styles */
        .slideshow-container {
            position: relative;
            max-width: 1000px;
            margin: auto;
        }

        .slideshow-slide {
            display: none;
            text-align: center;
        }

        .slideshow-slide.active {
            display: block;
        }

        .slideshow-slide img {
            max-width: 100%;
            max-height: 70vh;
            object-fit: contain;
        }

        .slideshow-prev, .slideshow-next {
            cursor: pointer;
            position: absolute;
            top: 50%;
            width: auto;
            margin-top: -22px;
            padding: 16px;
            color: var(--text-color);
            font-weight: bold;
            font-size: 24px;
            transition: 0.6s ease;
            border-radius: 0 3px 3px 0;
            user-select: none;
            background-color: rgba(0,0,0,0.1);
        }

        .slideshow-next {
            right: 0;
            border-radius: 3px 0 0 3px;
        }

        .slideshow-prev:hover, .slideshow-next:hover {
            background-color: rgba(0,0,0,0.3);
        }

        /* Blog post list styles */
        .post-list {
            margin: 20px 0;
        }

        .post-item {
            background-color: var(--sidebar-bg);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .post-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .post-title {
            font-size: 24px;
            margin-bottom: 10px;
        }

        .post-meta {
            color: var(--text-color);
            font-size: 14px;
            margin-bottom: 15px;
            opacity: 0.7;
        }

        .post-preview {
            margin-bottom: 15px;
        }

        /* User menu dropdown */
        .user-avatar {
            width: 140px;
            height: 140px;
            border-radius: 50%;
            object-fit: cover;
            object-position: center;
            cursor: pointer;
            border: 3px solid var(--border-color);
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .user-menu-container {
            position: relative;
            display: inline-block;
            z-index: 1200; /* Ensure higher z-index for proper layering */
            cursor: pointer;
        }

        .user-menu {
            position: absolute;
            left: 50%; /* Center align with the user icon */
            top: 100%; /* Position below the user icon */
            transform: translateX(-50%); /* Center the menu */
            background-color: var(--dropdown-bg);
            min-width: 220px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.3);
            border-radius: 8px;
            padding: 8px 0;
            z-index: 1200;
            display: none; /* Hidden by default */
            margin-top: 10px;
            text-align: left; /* Ensure text is left-aligned */
            border: 1px solid var(--border-color);
            color: var(--dropdown-text);
        }
        
        /* Add a small arrow/triangle at the top of the menu */
        .user-menu::before {
            content: '';
            position: absolute;
            top: -8px;
            left: 50%;
            transform: translateX(-50%);
            border-left: 8px solid transparent;
            border-right: 8px solid transparent;
            border-bottom: 8px solid var(--dropdown-bg);
        }
        
        /* Ensure the menu stays within the viewport on small screens */
        @media (max-width: 768px) {
            .user-menu {
                left: auto;
                right: 0;
                transform: none;
                margin-right: 10px;
            }
            
            .user-menu::before {
                left: auto;
                right: 15px;
            }
        }

        .user-menu.show {
            display: block;
        }

        .user-menu-item {
            padding: 8px 16px;
            display: block;
            text-decoration: none;
            color: var(--dropdown-text);
            transition: background-color 0.2s ease;
            background-color: var(--dropdown-bg);
            text-decoration: none;
            font-weight: 500;
        }

        .user-menu-item:hover {
            background-color: var(--dropdown-hover-bg);
            color: var(--dropdown-text);
        }

        .user-menu-item i {
            margin-right: 10px;
            width: 16px;
            text-align: center;
        }

        .user-menu-divider {
            height: 1px;
            background-color: var(--border-color);
            margin: 8px 0;
        }

        .user-info {
            padding: 10px 16px;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 8px;
            background-color: var(--dropdown-bg);
            color: var(--dropdown-text);
        }

        .user-info .user-name {
            font-weight: bold;
            font-size: 16px;
            color: var(--dropdown-text);
        }

        .user-info .user-email {
            font-size: 12px;
            color: var(--dropdown-text);
            opacity: 0.7;
        }
    </style>
    {% block extra_head %}{% endblock %}
    
    <!-- Stili migliorati per la photo grid della sidebar -->
    <style>
        /* Stili migliorati per la transizione delle immagini */
        .sidebar-photo-item img.fade-out {
            opacity: 0.2;
            transition: opacity 0.4s ease-out;
        }
        
        .sidebar-photo-item img.fade-in {
            opacity: 1;
            transition: opacity 0.4s ease-in;
        }
        
        /* Prevenire flickering durante il caricamento delle immagini */
        .sidebar-photo-item {
            position: relative;
            min-height: 80px;
            background-color: rgba(0,0,0,0.05);
        }
    </style>
</head>
<body data-theme="{% if user.is_authenticated and user.blogsettings.dark_mode %}dark{% else %}light{% endif %}"
      data-toggle-dark-mode-url="{% if user.is_authenticated %}{% url 'toggle_dark_mode' %}{% endif %}">
    <div class="d-flex">
        <!-- Sidebar -->
        <div id="sidebar" class="p-3" style="display: flex; flex-direction: column; height: 100vh;">
            <div class="d-flex justify-content-end align-items-center mb-4">
                <!-- Dark mode toggle moved to top navbar -->
            </div>

            {% if user.is_authenticated %}
                <div class="text-center mb-4">
                    <div class="user-menu-container">
                        {% if user.blogsettings.site_icon %}
                            <img src="{{ user.blogsettings.site_icon.url }}" alt="{{ user.username }}" class="user-avatar mb-2" id="userMenuToggle" onclick="toggleUserMenu(event)">
                        {% else %}
                            <div class="user-avatar mb-2 d-flex align-items-center justify-content-center bg-secondary" id="userMenuToggle" onclick="toggleUserMenu(event)">
                                <i class="fas fa-user text-white fs-1"></i>
                            </div>
                        {% endif %}
                        
                        <div class="user-menu" id="userMenu">
                            <div class="user-info">
                                <div class="user-name">{{ user.username }}</div>
                                <div class="user-email">{{ user.email }}</div>
                            </div>
                            <a href="{% url 'dashboard' %}" class="user-menu-item"> {# Link to Dashboard #}
                                <i class="fas fa-tachometer-alt"></i> Dashboard
                            </a>
                            <a href="{% url 'blog_view' username=user.username %}" class="user-menu-item" target="_blank"> {# Link to public blog view #}
                                <i class="fas fa-eye"></i> Vedi Blog Pubblico
                            </a>
                            <a href="{% url 'settings' %}" class="user-menu-item">
                                <i class="fas fa-cog"></i> Impostazioni
                            </a>
                            <div class="user-menu-divider"></div>
                            <a href="{% url 'logout' %}" class="user-menu-item">
                                <i class="fas fa-sign-out-alt"></i> Logout
                            </a>
                        </div>
                    </div>
                    
                    <a href="{% url 'home' %}" class="text-decoration-none">
                        <div class="d-flex align-items-center">
                            <h4 class="mb-0">{{ user.blogsettings.blog_name }}</h4>
                        </div>
                    </a>
                    <p class="text-muted">{{ user.blogsettings.tagline }}</p>
                </div>

                <div class="mb-4 sidebar-section">
                    <div class="sidebar-section-header sidebar-full d-flex align-items-center justify-content-between" id="albumsHeader">
                        <h5 style="font-weight: bold; margin-bottom: 0;">Album</h5>
                        <i class="fas fa-chevron-down dropdown-arrow"></i>
                    </div>
                    <div class="dropdown-preview" id="albumPreview">
                        {% if request.user.album_set.all.0 %}
                            {{ request.user.album_set.all.0.title }}...
                        {% else %}
                            Nessun album...
                        {% endif %}
                    </div>
                    <div class="dropdown-content" id="albumList" style="display: none;">
                        <ul class="list-unstyled mt-2">
                            {% for album in request.user.album_set.all %}
                                <li class="mb-2">
                                    <a href="{% url 'album_detail' album.pk %}" class="text-decoration-none">
                                        <span class="sidebar-full" style="font-weight: lighter;">{{ album.title }}</span>
                                        <i class="fas fa-images sidebar-icon" title="{{ album.title }}"></i>
                                    </a>
                                </li>
                            {% endfor %}
                            <li class="mb-2">
                                <a href="{% url 'album_create' %}" class="text-decoration-none">
                                    <span class="sidebar-full"><strong>Nuovo Album</strong></span>
                                    <i class="fas fa-plus sidebar-icon" title="Nuovo Album"></i>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>

                <div class="mb-4 sidebar-section">
                    <div class="sidebar-section-header sidebar-full d-flex align-items-center justify-content-between" id="postsHeader">
                        <h5 style="font-weight: bold; margin-bottom: 0;">Post</h5>
                        <i class="fas fa-chevron-down dropdown-arrow"></i>
                    </div>
                    <div class="dropdown-preview" id="postPreview">
                        Post recenti...
                    </div>
                    <div class="dropdown-content" id="postList" style="display: none;">
                        <ul class="list-unstyled mt-2">
                            <li class="mb-2">
                                <a href="{% url 'post_list' %}" class="text-decoration-none">
                                    <span class="sidebar-full" >I tuoi Post</span>
                                    <i class="fas fa-file-alt sidebar-icon" title="I tuoi Post"></i>
                                </a>
                            </li>
                            <li class="mb-2">
                                <a href="{% url 'post_create' %}" class="text-decoration-none">
                                    <span class="sidebar-full">Nuovo Post <i class="fas fa-plus" style="font-size: 0.8em;"></i></span>
                                    <i class="fas fa-plus sidebar-icon" title="Nuovo Post"></i>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
                
                {% include "blog/includes/sidebar_photo_grid.html" %}
                
                <!-- Pulsante Esplora sotto la mini galleria -->
                <div class="mt-3 mb-3">
                    <a href="{% url 'all_blogs' %}" class="btn btn-dark sidebar-full w-100">
                        <i class="fas fa-globe me-2"></i> Esplora
                    </a>
                    <a href="{% url 'all_blogs' %}" class="sidebar-icon" title="Esplora"><i class="fas fa-globe"></i></a>
                </div>
                
                <!-- Footer con crediti - bloccato in basso -->
                <div class="text-center mt-auto mb-2 sidebar-full" style="font-size: 0.8em; color: #888;">
                    <div class="d-flex justify-content-center">
                        {% if request.user.blogsettings.symbol_icon %}
                            <div style="width: 30px; height: 30px; margin-bottom: 8px; display: flex; align-items: center; justify-content: center; overflow: hidden;">
                                <img src="{{ request.user.blogsettings.symbol_icon.url }}" alt="Blog Icon" style="width: 100%; height: 100%; object-fit: contain;">
                            </div>
                        {% else %}
                            <img src="{% static 'logo_foto.svg' %}" alt="Blogix Logo" class="logo-light" style="height: 30px; margin-bottom: 8px;">
                            <img src="{% static 'logo_white.svg' %}" alt="Blogix Logo" class="logo-dark" style="height: 30px; margin-bottom: 8px;">
                        {% endif %}
                    </div>
                    <div>blog di {{ request.user.username }}</div>
                    <div>blackix.it ®</div>
                </div>
            {% else %}
                <div class="text-center mb-4">
                    <a href="{% url 'home' %}" class="text-decoration-none">
                        <h4>Photo Blog</h4>
                    </a>
                </div>
                
                <!-- Visualizzazione album pubblici per utenti non autenticati -->
                <div class="mb-4">
                    <h5 class="sidebar-full">Album</h5>
                    <ul class="list-unstyled">
                        {% for user in users_with_published_blogs %}
                            <li class="mb-2">
                                <span class="sidebar-full fw-bold">{{ user.username }}</span>
                                <ul class="list-unstyled ms-3">
                                    {% for album in user.album_set.all %}
                                        <li class="mb-1">
                                            <a href="{% url 'public_album_detail' username=user.username pk=album.pk %}" class="text-decoration-none">
                                                <span class="sidebar-full">{{ album.title }}</span>
                                                <i class="fas fa-images sidebar-icon" title="{{ album.title }}"></i>
                                            </a>
                                        </li>
                                    {% endfor %}
                                </ul>
                            </li>
                        {% endfor %}
                    </ul>
                </div>
                
                <!-- Visualizzazione post blog per utenti non autenticati -->
                <div class="mb-4">
                    <h5 class="sidebar-full">Blog</h5>
                    <ul class="list-unstyled">
                        {% for user in users_with_published_blogs %}
                            <li class="mb-2">
                                <a href="{% url 'blog_view' username=user.username %}" class="text-decoration-none">
                                    <span class="sidebar-full">{{ user.username }}</span>
                                </a>
                            </li>
                        {% endfor %}
                    </ul>
                </div>
                
                {% include "blog/includes/sidebar_photo_grid.html" %}
                
                <!-- Pulsante Esplora sotto la mini galleria -->
                <div class="mt-3 mb-3">
                    <a href="{% url 'all_blogs' %}" class="btn btn-dark sidebar-full w-100">
                        <i class="fas fa-globe me-2"></i> Esplora
                    </a>
                    <a href="{% url 'all_blogs' %}" class="sidebar-icon" title="Esplora"><i class="fas fa-globe"></i></a>
                </div>
                
                <!-- Footer con crediti - bloccato in basso -->
                <div class="text-center mt-auto mb-2 sidebar-full" style="font-size: 0.8em; color: #888;">
                    <div class="d-flex justify-content-center">
                        {% if request.user.blogsettings.symbol_icon %}
                            <div style="width: 30px; height: 30px; margin-bottom: 8px; display: flex; align-items: center; justify-content: center; overflow: hidden;">
                                <img src="{{ request.user.blogsettings.symbol_icon.url }}" alt="Blog Icon" style="width: 100%; height: 100%; object-fit: contain;">
                            </div>
                        {% else %}
                            <img src="{% static 'logo_foto.svg' %}" alt="Blogix Logo" class="logo-light" style="height: 30px; margin-bottom: 8px;">
                            <img src="{% static 'logo_white.svg' %}" alt="Blogix Logo" class="logo-dark" style="height: 30px; margin-bottom: 8px;">
                        {% endif %}
                    </div>
                    <div>blog di {{ request.user.username }}</div>
                    <div>blackix.it ®</div>
                </div>
                
                <div class="mt-auto">
                    <div class="d-grid gap-2">
                        <a href="{% url 'login' %}" class="btn sidebar-full">Accedi</a>
                        <a href="{% url 'login' %}" class="sidebar-icon" title="Accedi"><i class="fas fa-sign-in-alt"></i></a>
                        
                        <a href="{% url 'register' %}" class="btn sidebar-full">Registrati</a>
                        <a href="{% url 'register' %}" class="sidebar-icon" title="Registrati"><i class="fas fa-user-plus"></i></a>
                    </div>
                </div>
            {% endif %}
        </div>

        <!-- Sidebar Toggle Button (left-aligned) -->
        <button class="toggle-button sidebar-toggle" id="sidebarToggleBtn" type="button">
            <i class="fas fa-arrow-left" id="sidebarToggleIcon"></i>
        </button>
        
        <!-- Dark Mode Toggle Button (top-right corner) -->
        <button class="toggle-button dark-mode-btn" id="darkModeToggleBtn" type="button">
            <i class="fas fa-moon" id="darkModeIcon"></i>
        </button>
        
        <!-- Horizontal Color Selector for Photo Grid - Only shown on blog view pages -->
        {% if request.path|slice:':6' == '/blog/' %}
        <div class="horizontal-color-selector" id="gridColorSelector">
            <div class="color-options">
                <button class="color-option" data-color="#ffffff" style="background-color: #ffffff;"></button>
                <button class="color-option" data-color="#e0e0e0" style="background-color: #e0e0e0;"></button>
                <button class="color-option" data-color="#9e9e9e" style="background-color: #9e9e9e;"></button>
                <button class="color-option" data-color="#424242" style="background-color: #424242;"></button>
                <button class="color-option" data-color="#121212" style="background-color: #121212;"></button>
            </div>
        </div>
        {% endif %}

        <!-- Content -->
        <div id="content" class="p-4 p-sm-3 p-md-4">
            {% if messages %}
                {% for message in messages %}
                    <div class="alert alert-{{ message.tags }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
            {% block content %}{% endblock %}
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{% static 'js/vr-viewer.js' %}"></script>
    <script src="{% static 'js/mobile.js' %}"></script>
    <script src="{% static 'js/vr-slideshow-integration.js' %}"></script>
    <!-- Script per la griglia di foto nella barra laterale -->
    <script>
        /**
         * Script per gestire la transizione delle foto nella griglia della barra laterale
         */
        document.addEventListener('DOMContentLoaded', function() {
            // Array per memorizzare tutte le foto disponibili
            let allPhotos = [];
            
            // Funzione per caricare le foto casuali tramite AJAX
            function loadRandomPhotos() {
                console.log('Inizializzazione caricamento foto casuali');
                
                // Controlla se ci sono foto salvate in sessionStorage
                const savedPhotos = sessionStorage.getItem('sidebarGridPhotos');
                const savedCurrentPhotos = sessionStorage.getItem('sidebarCurrentPhotos');
                
                if (savedPhotos) {
                    // Usa le foto salvate
                    try {
                        allPhotos = JSON.parse(savedPhotos);
                        console.log('Ripristinate foto salvate dalla sessionStorage:', allPhotos.length, 'foto trovate');
                        
                        if (savedCurrentPhotos) {
                            // Ripristina le foto correnti senza aggiornare la griglia
                            try {
                                const currentPhotos = JSON.parse(savedCurrentPhotos);
                                console.log('Ripristinate foto correnti dalla sessionStorage:', currentPhotos.length, 'foto');
                                displaySavedPhotos(currentPhotos);
                                // Avvia il timer per la transizione
                                startPhotoTransition();
                                return;
                            } catch (e) {
                                console.error('Errore nel parsing delle foto correnti:', e);
                            }
                        }
                        
                        // Inizializza la griglia con le prime 4 foto
                        updatePhotoGrid();
                        // Avvia il timer per la transizione
                        startPhotoTransition();
                    } catch (e) {
                        console.error('Errore nel parsing delle foto salvate:', e);
                        // Se c'è un errore, carica nuove foto
                        fetchNewPhotos();
                    }
                } else {
                    console.log('Nessuna foto salvata in sessionStorage, caricamento dal server...');
                    fetchNewPhotos();
                }
            }
            
            // Funzione per caricare nuove foto dal server
            function fetchNewPhotos() {
                console.log('Chiamata API per foto casuali...');
                // URL completo per debug
                const apiUrl = window.location.origin + '/api/random-photos/?limit=20';
                console.log('URL API:', apiUrl);
                
                fetch(apiUrl)
                    .then(response => {
                        console.log('Risposta API ricevuta, status:', response.status);
                        if (!response.ok) {
                            throw new Error('Risposta API non valida: ' + response.status);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Dati API ricevuti:', data);
                        if (data.photos && Array.isArray(data.photos)) {
                            allPhotos = data.photos;
                            console.log('Foto caricate con successo:', allPhotos.length, 'foto');
                            // Salva le foto in sessionStorage
                            sessionStorage.setItem('sidebarGridPhotos', JSON.stringify(allPhotos));
                            // Inizializza la griglia con le prime 4 foto
                            updatePhotoGrid();
                            // Avvia il timer per la transizione
                            startPhotoTransition();
                        } else {
                            console.error('Formato dati API non valido:', data);
                        }
                    })
                    .catch(error => {
                        console.error('Errore nel caricamento delle foto casuali:', error);
                        // In caso di errore, mostra un messaggio nella console
                        document.querySelectorAll('.sidebar-photo-item').forEach(item => {
                            console.log('Impostazione placeholder per errore API');
                        });
                    });
            }
            
            // Funzione per visualizzare le foto salvate senza animazione
            function displaySavedPhotos(photos) {
                const gridItems = document.querySelectorAll('.sidebar-photo-item');
                
                gridItems.forEach((item, index) => {
                    if (index < photos.length) {
                        const photo = photos[index];
                        const img = item.querySelector('img');
                        const overlay = item.querySelector('.photo-overlay');
                        
                        img.src = photo.image_url;
                        img.alt = photo.caption || 'Foto';
                        item.dataset.photoId = photo.id;
                        item.dataset.photoUrl = `/blog/${photo.username}/`;
                        item.dataset.albumId = photo.album_id;
                        item.dataset.username = photo.username;
                        
                        if (overlay) {
                            overlay.innerHTML = `
                                <span>${photo.album_title || 'Album'}</span>
                                <span>${photo.username || 'Utente'}</span>
                            `;
                        }
                    }
                });
            }
            
            // Funzione per aggiornare la griglia di foto
            function updatePhotoGrid() {
                console.log('Aggiornamento griglia foto...');
                const gridItems = document.querySelectorAll('.sidebar-photo-item');
                console.log('Elementi griglia trovati:', gridItems.length);
                
                // Se non ci sono abbastanza foto, mostra un messaggio di debug
                if (!allPhotos || allPhotos.length < 4) {
                    console.warn('Non ci sono abbastanza foto disponibili:', allPhotos ? allPhotos.length : 0);
                    // Continua comunque con le foto disponibili
                    if (!allPhotos || allPhotos.length === 0) {
                        console.error('Nessuna foto disponibile per la griglia');
                        return;
                    }
                }
                
                console.log('Foto disponibili:', allPhotos.length);
                
                // Seleziona 4 foto casuali dall'array
                const randomPhotos = [];
                const usedIndexes = new Set();
                
                while (randomPhotos.length < 4 && usedIndexes.size < allPhotos.length) {
                    const randomIndex = Math.floor(Math.random() * allPhotos.length);
                    if (!usedIndexes.has(randomIndex)) {
                        usedIndexes.add(randomIndex);
                        randomPhotos.push(allPhotos[randomIndex]);
                    }
                }
                
                console.log('Foto selezionate per la griglia:', randomPhotos.length);
                
                // Salva le foto correnti in sessionStorage
                try {
                    sessionStorage.setItem('sidebarCurrentPhotos', JSON.stringify(randomPhotos));
                    console.log('Foto correnti salvate in sessionStorage');
                } catch (e) {
                    console.error('Errore nel salvataggio delle foto correnti:', e);
                }
                
                // Aggiorna le immagini nella griglia
                gridItems.forEach((item, index) => {
                    if (index < randomPhotos.length) {
                        try {
                            const photo = randomPhotos[index];
                            console.log(`Aggiornamento elemento ${index+1}:`, photo.id, photo.image_url);
                            
                            const img = item.querySelector('img');
                            const overlay = item.querySelector('.photo-overlay');
                            
                            if (!img) {
                                console.error(`Elemento img non trovato per l'item ${index+1}`);
                                return;
                            }
                            
                            // Precarica l'immagine per evitare flickering
                            const preloadImg = new Image();
                            
                            // Gestione errori per il caricamento dell'immagine
                            img.onerror = function() {
                                console.error(`Errore caricamento immagine ${index+1}:`, photo.image_url);
                                this.src = '/static/img/placeholder.jpg';
                                this.alt = 'Immagine non disponibile';
                            };
                            
                            // Aggiungi classe per l'animazione di fade out (più veloce)
                            img.classList.add('fade-out');
                            
                            // Precarica l'immagine prima di mostrarla
                            preloadImg.onload = function() {
                                // Quando l'immagine è caricata, aggiornala nell'interfaccia
                                setTimeout(() => {
                                    img.src = photo.image_url;
                                    img.alt = photo.caption || 'Foto';
                                    item.dataset.photoId = photo.id;
                                    item.dataset.photoUrl = `/blog/${photo.username}/`;
                                    item.dataset.albumId = photo.album_id;
                                    item.dataset.username = photo.username;
                                    
                                    if (overlay) {
                                        overlay.innerHTML = `
                                            <span>${photo.album_title || 'Album'}</span>
                                            <span>${photo.username || 'Utente'}</span>
                                        `;
                                    }
                                    
                                    // Rimuovi la classe fade-out e aggiungi fade-in
                                    img.classList.remove('fade-out');
                                    img.classList.add('fade-in');
                                    
                                    // Dopo l'animazione, rimuovi la classe fade-in
                                    setTimeout(() => {
                                        img.classList.remove('fade-in');
                                    }, 500); // Durata più breve per il fade-in
                                }, 400); // Durata più breve per il fade-out
                            };
                            
                            // Gestione errori per il precaricamento
                            preloadImg.onerror = function() {
                                console.error(`Errore precaricamento immagine ${index+1}:`, photo.image_url);
                                img.onerror();
                            };
                            
                            // Avvia il precaricamento
                            preloadImg.src = photo.image_url;
                        } catch (e) {
                            console.error(`Errore nell'aggiornamento dell'elemento ${index+1}:`, e);
                        }
                    }
                });
            }
            
            // Variabile per memorizzare l'ID del timer
            let transitionTimer = null;
            
            // Funzione per avviare la transizione periodica delle foto
            function startPhotoTransition() {
                // Cambia le foto ogni 15 secondi (ridotto da 20)
                transitionTimer = setInterval(updatePhotoGrid, 15000);
            }
            
            // Gestione del click sulle foto della griglia
            document.addEventListener('click', function(e) {
                const item = e.target.closest('.sidebar-photo-item');
                if (item) {
                    const photoId = item.dataset.photoId;
                    const username = item.dataset.username;
                    
                    if (photoId && username) {
                        // Salva lo stato del timer in sessionStorage prima di navigare
                        sessionStorage.setItem('lastPhotoGridUpdate', Date.now());
                        
                        // Salva l'ID della foto da aprire automaticamente
                        sessionStorage.setItem('openPhotoId', photoId);
                        
                        // Reindirizza alla pagina del blog con visualizzazione compatta
                        window.location.href = `/blog/${username}/`;
                    }
                }
            });
            
            // Funzione per controllare se dobbiamo ripristinare il timer
            function initPhotoGrid() {
                const lastUpdate = sessionStorage.getItem('lastPhotoGridUpdate');
                
                if (lastUpdate) {
                    const now = Date.now();
                    const elapsed = now - parseInt(lastUpdate);
                    const interval = 20000; // 20 secondi
                    
                    // Se è passato meno tempo dell'intervallo, calcola il tempo rimanente
                    if (elapsed < interval) {
                        const remaining = interval - elapsed;
                        
                        // Carica le foto immediatamente
                        loadRandomPhotos();
                        
                        // Avvia un timer una tantum per la prossima transizione
                        setTimeout(() => {
                            // Aggiorna le foto
                            updatePhotoGrid();
                            // Poi avvia il timer regolare
                            startPhotoTransition();
                        }, remaining);
                        
                        console.log(`Ripristino timer: prossima transizione tra ${Math.round(remaining/1000)} secondi`);
                        return;
                    }
                }
                
                // Se non c'è stato un aggiornamento recente, inizia normalmente
                loadRandomPhotos();
            }
            
            // Inizializza la griglia di foto
            initPhotoGrid();
        });
    </script>
    <script>
        $(document).ready(function() {
            const sidebar = $('#sidebar');
            const content = $('#content');
            const toggleButton = $('#sidebarToggleBtn');
            const toggleIcon = $('#sidebarToggleIcon');
            const userMenuToggle = $('#userMenuToggle');
            const userMenu = $('#userMenu');
            
            // Remove document click handlers but be careful not to break user menu functionality
            $(document).off('click.sidebar');
            $('body').off('click.sidebar');
            $('#content').off('click.sidebar');

            // Function to update the toggle icon based on sidebar state
            function updateToggleIcon() {
                const isMobile = $(window).width() <= 768;
                const isHidden = isMobile ? !sidebar.hasClass('active') : sidebar.hasClass('collapsed');
                
                if (isHidden) {
                    // Sidebar is hidden - show right arrow
                    toggleIcon.removeClass('fa-arrow-left').addClass('fa-arrow-right');
                } else {
                    // Sidebar is visible - show left arrow
                    toggleIcon.removeClass('fa-arrow-right').addClass('fa-arrow-left');
                }
            }
            
            // Function to toggle sidebar visibility - ONLY called by toggle button
            function toggleSidebar(e) {
                // Prevent default action and stop propagation
                if (e) {
                    e.preventDefault();
                    e.stopPropagation();
                }
                
                const isMobile = $(window).width() <= 992; // Increased breakpoint to 992px
                
                if (isMobile) {
                    // Mobile behavior
                    sidebar.toggleClass('active');
                } else {
                    // Desktop behavior
                    sidebar.toggleClass('collapsed');
                    content.toggleClass('expanded');
                }
                
                // Save state to localStorage
                const isHidden = isMobile ? !sidebar.hasClass('active') : sidebar.hasClass('collapsed');
                localStorage.setItem('sidebarCollapsed', isHidden);
                
                // Update the toggle icon
                updateToggleIcon();
            }

            // ONLY the toggle button should control the sidebar
            // Make sure we're using a direct click handler
            toggleButton.off('click').on('click', function(e) {
                console.log('Toggle button clicked directly');
                toggleSidebar(e);
            });
            
            // Also attach the handler to the icon to ensure clicks on the icon work
            toggleIcon.off('click').on('click', function(e) {
                console.log('Toggle icon clicked');
                // Prevent the event from propagating to avoid double-triggering
                e.stopPropagation();
                // Manually trigger the parent button click
                toggleButton.trigger('click');
            });
            
            // Make sure no other clicks affect the sidebar
            // We're not attaching any document-level click handlers that could affect the sidebar

            // User menu toggle with improved positioning - completely rewritten
            // Global function to toggle user menu - accessible from inline onclick
            window.toggleUserMenu = function(e) {
                if (e) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                console.log('Toggling user menu directly');
                $('#userMenu').toggle();
            };
            
            // Setup document click handler to close menu when clicking outside
            $(document).on('click', function(e) {
                // If click is outside menu and not on the toggle
                if (!$(e.target).closest('#userMenu').length && 
                    !$(e.target).closest('#userMenuToggle').length && 
                    !$(e.target).hasClass('user-avatar')) {
                    $('#userMenu').hide();
                }
            });
            
            // Ensure menu is initially hidden
            $('#userMenu').hide();
            
            // User menu is now handled by inline onclick and global function

            // User menu is now handled by the setupUserMenu function
            
            // Photo grid background color selector
            $('.color-option').click(function() {
                const selectedColor = $(this).data('color');
                document.documentElement.style.setProperty('--photo-grid-bg', selectedColor);
                
                // Save preference to localStorage
                localStorage.setItem('photoGridBgColor', selectedColor);
                
                // Update active state
                $('.color-option').removeClass('active');
                $(this).addClass('active');
            });
            
            // Load saved color preference if it exists
            const savedColor = localStorage.getItem('photoGridBgColor');
            if (savedColor) {
                document.documentElement.style.setProperty('--photo-grid-bg', savedColor);
                $(`.color-option[data-color="${savedColor}"]`).addClass('active');
            } else {
                // Default to white
                $('.color-option[data-color="#ffffff"]').addClass('active');
            }

            // Force sidebar to be hidden on mobile
            function applySidebarState() {
                const screenWidth = $(window).width();
                const isMobile = screenWidth <= 992;
                
                if (isMobile) {
                    // On mobile, always start with sidebar hidden
                    sidebar.removeClass('active');
                    sidebar.addClass('collapsed');
                    content.addClass('expanded');
                    console.log('Mobile view: hiding sidebar automatically');
                } else {
                    // On desktop, respect user preference
                    const userWantsHidden = localStorage.getItem('sidebarCollapsed') === 'true';
                    if (userWantsHidden) {
                        sidebar.addClass('collapsed');
                        content.addClass('expanded');
                    } else {
                        sidebar.removeClass('collapsed');
                        content.removeClass('expanded');
                    }
                    console.log('Desktop view: sidebar state based on user preference');
                }
                
                // Update the toggle icon
                updateToggleIcon();
            }
            
            // Apply sidebar state immediately
            applySidebarState();
            
            // Initialize the toggle icon based on current state
            updateToggleIcon();
            
            // Handle window resize events with debouncing for better performance
            let resizeTimer;
            $(window).on('resize', function() {
                clearTimeout(resizeTimer);
                resizeTimer = setTimeout(function() {
                    // Apply sidebar state on resize
                    applySidebarState();
                    console.log('Window resized, sidebar state updated');
                }, 250); // Wait 250ms after resize ends before applying changes
            });
            
            // Also apply sidebar state when page loads
            $(window).on('load', function() {
                applySidebarState();
                console.log('Page loaded, sidebar state initialized');
            });

            // Dark mode toggle
            // Dark mode toggle logic
            const toggleUrl = $('body').data('toggle-dark-mode-url');
            
            if (toggleUrl) {
                // Logic for authenticated users (AJAX)
                $('#darkModeToggleBtn').on('click', function() {
                    const csrfToken = $('meta[name="csrf-token"]').attr('content');
                    $.ajax({
                        url: toggleUrl,
                        type: 'POST',
                        headers: { 'X-CSRFToken': csrfToken },
                        success: function(data) {
                            $('body').attr('data-theme', data.dark_mode ? 'dark' : 'light');
                            updateDarkModeIcon();
                        },
                        error: function(xhr) {
                            console.error("Error toggling dark mode:", xhr.responseText);
                        }
                    });
                });
            } else {
                // Logic for guest users (localStorage)
                // Restore theme on load
                if (localStorage.getItem('guestTheme') === 'dark') {
                    $('body').attr('data-theme', 'dark');
                }
                // Attach click handler
                $('#darkModeToggleBtn').on('click', function() {
                    const currentTheme = $('body').attr('data-theme');
                    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                    $('body').attr('data-theme', newTheme);
                    localStorage.setItem('guestTheme', newTheme);
                    updateDarkModeIcon();
                });
            }
            
            // Function to update dark mode icon based on current theme
            function updateDarkModeIcon() {
                const isDarkMode = $('body').attr('data-theme') === 'dark';
                if (isDarkMode) {
                    $('#darkModeIcon').removeClass('fa-moon').addClass('fa-sun');
                } else {
                    $('#darkModeIcon').removeClass('fa-sun').addClass('fa-moon');
                }
            }
            
            // Initialize dark mode icon
            updateDarkModeIcon();

            // Funzione per gestire i menu a discesa in modo più robusto
            function setupDropdownMenu(headerId, contentId, previewId) {
                const $header = $(`#${headerId}`);
                const $content = $(`#${contentId}`);
                const $arrow = $header.find('.dropdown-arrow');
                const $preview = $(`#${previewId}`);
                
                // Imposta lo stato iniziale
                if ($content.is(':visible')) {
                    $arrow.css('transform', 'rotate(180deg)');
                    $preview.removeClass('show');
                } else {
                    $arrow.css('transform', 'rotate(0deg)');
                    $preview.addClass('show');
                }
                
                // Gestione del click sull'intestazione
                $header.on('click', function() {
                    // Toggle della visibilità con animazione
                    $content.slideToggle(150, function() {
                        // Callback dopo l'animazione
                        if ($content.is(':visible')) {
                            $arrow.css('transform', 'rotate(180deg)');
                            $preview.removeClass('show');
                            // Salva lo stato nel localStorage
                            localStorage.setItem(contentId + '_state', 'open');
                        } else {
                            $arrow.css('transform', 'rotate(0deg)');
                            $preview.addClass('show');
                            // Salva lo stato nel localStorage
                            localStorage.setItem(contentId + '_state', 'closed');
                        }
                    });
                });
                
                // Ripristina lo stato dal localStorage
                const savedState = localStorage.getItem(contentId + '_state');
                if (savedState === 'open') {
                    $content.show();
                    $arrow.css('transform', 'rotate(180deg)');
                    $preview.removeClass('show');
                } else {
                    $content.hide();
                    $arrow.css('transform', 'rotate(0deg)');
                    $preview.addClass('show');
                }
            }
            
            // Inizializza i menu a discesa
            setupDropdownMenu('albumsHeader', 'albumList', 'albumPreview');
            setupDropdownMenu('postsHeader', 'postList', 'postPreview');

            // Inizializza slideshow se presente
            initializeSlideshow();
        });

        function initializeSlideshow() {
            const slideshowContainer = document.querySelector('.slideshow-container');
            if (!slideshowContainer) {
                console.log("Slideshow container not found, exiting initializeSlideshow");
                return;
            }

            const slides = document.querySelectorAll('.slideshow-slide');
            if (slides.length === 0) return;

            let currentSlide = 0;
            slides[currentSlide].classList.add('active');

            // Previous button functionality
            document.querySelector('.slideshow-prev').addEventListener('click', function() {
                slides[currentSlide].classList.remove('active');
                currentSlide = (currentSlide - 1 + slides.length) % slides.length;
                slides[currentSlide].classList.add('active');
            });

            // Next button functionality
            document.querySelector('.slideshow-next').addEventListener('click', function() {
                slides[currentSlide].classList.remove('active');
                currentSlide = (currentSlide + 1) % slides.length;
                slides[currentSlide].classList.add('active');
            });
        }
    </script>
    {% block extra_js %}{% endblock %}
</body>
</html>
